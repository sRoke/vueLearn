<template>
  <div>
    <div>
      <el-row  v-loading.fullscreen.lock="fullscreenLoading" element-loading-text="正在加载中">      
          <el-button class="m-b-20 btn-link-large add-btn f-l" @click="addPic()">
            <i class="el-icon-plus"></i>&nbsp;&nbsp;添加
          </el-button>
        <div class="fr">
        <el-select v-model="type" @change="select()">
          <el-option
            v-for="item in options"
            :label="item.label"
            :value="item.type">
          </el-option>
        </el-select>
        <reset-btn class="fr m-l-10"
                 :reset="handleClearFilter"></reset-btn>
        </div>
      </el-row>
    </div>
    <el-table
      ref="t1"
      :data="tableData"
      style="width: 100%" @sort-change="sorts"
      @selection-change="handleSelectionChange">
      <el-table-column
        type="selection"
        v-if='isMDel'
        :reserve-selection=true
        :selectable='isSelect'
        width="55">
      </el-table-column>
      <el-table-column
          label="编号"
          >
          <template scope="scope">
            <span>{{ scope.row.num }}</span>
          </template>
        </el-table-column>
        <el-table-column
          label="类型"
          >
          <template scope="scope">
            <span>{{ scope.row.type }}</span>
          </template>
        </el-table-column>
        <el-table-column
          label="封面"
          >
          <template scope="scope">
            <img :src='scope.row.img_url'/>
          </template>
        </el-table-column>
        <el-table-column
          label="外链"
          min-width="100"
          show-overflow-tooltip>
          <template scope="scope">
            <span>{{ scope.row.visit_url }}</span>
          </template>
        </el-table-column>
        <el-table-column
          label="启用"
          >
          <template scope="scope">
            <span>{{ scope.row.start }}</span>
          </template>
        </el-table-column>
        <el-table-column
          label="排序"
          sortable="false" prop="sort">
          <template scope="scope">
            <span>{{ scope.row.sort }}</span>
          </template>
        </el-table-column>
        <el-table-column label="操作">
          <template scope="scope">
            <el-button
              size="small"
              type="primary"
              @click="handleEdit(scope.row.id)">编辑</el-button>
            <el-button
              size="small"
              type="danger"
              @click="handleDelete(scope.row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-row>
    <addPic ref="addPic" :info="tableData"></addPic>
    <editPic ref="editPic" :info="tableData"></editPic>
    <div class="pos-rel p-t-20" v-show="isPage">
    <div class="block pages m-b-10">
      <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      layout="total, sizes, prev, pager, next, jumper"
      :page-sizes="[15, 30, 50, 100]"
      :page-size="pageSize"
      :current-page="currentPage"
      :total="dataCount">
      </el-pagination>
    </div>
  </div>
    <div class="fl">
      <el-button type="primary" size="small" v-show='!isMDel' @click='multiDelete'>批量删除</el-button>
      <el-button type="primary" size="small" v-show='isMDel' @click='cancelDel'>取消</el-button>
      <el-button type="primary" size="small" v-show='isMDel' @click='sureDel'>确定删除</el-button>
    </div>
  </div>
</template>
<style>
  .el-table .cell img{
    width: 50px;
    height: 50px;
  }
</style>
<script>
  import resetBtn from '../../common/reset.vue'
  import http from '../../../assets/js/http'
  import editPic from './pic_edit.vue'
  import addPic from './pic_add.vue'
  export default {
    watch: {
      '$route'(to, from) {
        var self = this
        self.init()
      }
    },
    data() {
      return {
        fullscreenLoading: false,
        isMDel: false,
        delList: [],
        pageSize: 15,
        sort: null,
        x: 1,
        tableData: [],
        options: [{
          type: '',
          label: '全部类型'
        }, {
          type: '1',
          label: '首页'
        }, {
          type: '2',
          label: '设计库'
        }, {
          type: '3',
          label: '设计快讯'
        }, {
          type: '4',
          label: '视频专区'
        }, {
          type: '5',
          label: '经典案例'
        }],
        type: '',
        currentPage: 1,
        dataCount: 1,
        isPage: false,
        datacount: null
      }
    },
    methods: {
      handleClearFilter() {
        this.type = ''
      },
      select() {
        var self = this
        router.push({ path: '/data/info/pic', query: { page: self.currentPage, pagesize: self.pageSize, type: self.type, sort: self.sort }})
      },
      init() {
        this.fullscreenLoading = true
        var self = this
        if (self.$route.fullPath == '/data/info/pic') {
          self.currentPage = 1
          self.pageSize = 15
          self.type = ''
          self.sort = ''
        } else {
          self.currentPage = self.$route.query.page * 1
          self.pageSize = self.$route.query.pagesize * 1
          self.type = self.$route.query.type
          self.sort = self.$route.query.sort
        }
        self.getData()
      },
      getData() {
        this.apiGet('carousels?page=' + this.currentPage + '&pagesize=' + this.pageSize + '&type=' + this.type + '&sort=' + this.sort).then((res) => {
          this.fullscreenLoading = false
          if (res.code == 200) {
            if (res.data.list.length > 0) {
              this.isPage = true
            }
            let data = {}
            this.tableData = _(res.data.list).forEach((val, key) => {
              if (val.img_url) {
                val.img_url = window.imgUrl + val.img_url + '_50x50_.jpg'
              }
              if (val.start == 1) {
                val.start = '√'
              } else {
                val.start = '×'
              }
              if (val.type == 1) {
                val.type = '首页'
              } else if (val.type == 2) {
                val.type = '设计库'
              } else if (val.type == 3) {
                val.type = '设计快讯'
              } else if (val.type == 4) {
                val.type = '视频专区'
              } else if (val.type == 5) {
                val.type = '经典案例'
              }
            })
            this.dataCount = res.data.total_count
          } else {
            _g.dealError(this, res)
          }
        })
      },
      sorts() {
        // console.log(this.sort)
        // console.log(this.x)
        if (this.x % 2 == 0) {
          this.sort = 2
          this.select()
          this.x ++
        } else {
          this.sort = 1
          this.select()
          this.x ++
        }
      },
      handleEdit(id) {
        this.tableData = this.tableData
        this.$refs.editPic.open(id)
      },
      handleDelete(item) {
        this.$confirm('确认删除?', '提示', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.apiDelete('carousels/', item.id).then((res) => {
            console.log(item.id)
            if (res.code == 200) {
              _g.toastMsg(this, 'success', '删除成功')
              this.getData()
            } else {
              _g.dealError(this, res)
            }
          })
        }).catch(() => {
          this.$message({
            type: 'info',
            message: '已取消删除'
          })
        })
      },
      handleCurrentChange(val) {
        console.log(val)
        this.currentPage = val
        this.select()
      },
      addPic() {
        this.$refs.addPic.open()
      },
      editPic() {
        this.$refs.editPic.open()
      },
      handleSizeChange(val) {
        this.pageSize = val
        this.currentPage = 1
        this.select()
        // console.log(`每页 ${val} 条`)
      },
      isSelect(row, index) {
        return true
      },
      multiDelete() {
        this.isMDel = true
      },
      sureDel() {
        // console.log(JSON.stringify(this.delList))
        let asd = {
          delList: this.delList
          // delList: this.delList
        }
        // asd.push(asd)
        // console.log(asd)
        if (this.delList.length == 0) {
          _g.toastMsg(this, 'warning', '请选择删除项')
        } else {
          // console.log(asd)
          this.apiPost('carousels/destroy', asd).then((res) => {
            if (res.code == 200) {
              _g.toastMsg(this, 'success', '删除成功')
              this.getData()
            } else {
              _g.dealError(this, res)
            }
          })
          this.isMDel = false
        }
        // console.log((this.delList))
      },
      cancelDel() {
        this.$refs.t1.clearSelection(this.tableData)
        this.isMDel = false
      },
      handleSelectionChange(val) {
        this.delList = []
        _(val).forEach((res, key) => {
          this.delList.push(res.id)
        })
      }
    },
    created() {
      this.init()
      let data = {}
      this.apiGet('carousels', data).then((res) => {
        // console.log('res = ', res)
      })
    },
    components: {
      'reset-btn': resetBtn,
      addPic,
      editPic
    },
    mixins: [http]
  }
</script>