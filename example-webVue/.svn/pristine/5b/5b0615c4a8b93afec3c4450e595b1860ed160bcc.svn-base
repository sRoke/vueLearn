<template>
  <div class="customerData">
  
    <!-- 基础信息模板 -->
    <el-card class="box-card base-card m-b-20">
      <div slot="header"
           class="clearfix">
        <span style="line-height: 36px;">基本信息</span>
        <!--<el-button class="fr" type="success" @click="addContact">保存 </el-button>-->
      </div>
      <el-form :inline="true"
               :model="form"
               :rules="rules"
               label-width="100px">
        <el-row>
          <el-form-item label="公海编号：">
            <div class="w-500"
                 style="color: #5e6d82;">
              {{ form.num }}
            </div>
          </el-form-item>
          <el-form-item label="公司名称："
                        prop="name">
            <el-input v-if="canEdit"
                      class="w-500"
                      v-model="form.name"
                      :disabled="isEdit"></el-input>
            <span v-else
                  class="w-500">{{ form.name }}</span>
          </el-form-item>
          <el-form-item label="公司电话：">
            <el-input v-if="canEdit"
                      class="w-500"
                      v-model="form.mobile"
                      :disabled="isEdit"></el-input>
            <span v-else
                  class="w-500">{{ form.mobile }}</span>
          </el-form-item>
          <el-form-item label="公司认证：">
            <el-radio-group v-if="canEdit"
                            class="w-500"
                            v-model="auth">
              <el-radio :label="0">未认证</el-radio>
              <el-radio :label="1">已认证</el-radio>
            </el-radio-group>
            <span v-else
                  class="w-500">{{ form.authLabel }}</span>
          </el-form-item>
          <el-form-item label="公司规模：">
            <el-input v-if="canEdit"
                      class="w-500"
                      v-model="form.size"
                      :disabled="isEdit"></el-input>
            <span v-else
                  class="w-500">{{ form.size }}</span>
          </el-form-item>
        </el-row>
        <el-row>
          <el-form-item label="公司地址：">
            <el-row type='flex'
                    v-if="canEdit"
                    class="w-500"
                    justify='start'>
              <div style="flex:1">
                <el-cascader :options="proCityList"
                             v-model="proCityVal"
                             @change="handleChangeCity">
                </el-cascader>
              </div>
              <div style="flex:1">
                <el-input v-model="form.address"
                          placeholder="请输入详细地址">
                </el-input>
              </div>
            </el-row>
            <span v-else
                  class="w-500">{{ fullAddress }}</span>
          </el-form-item>
        </el-row>
        <el-row>
          <el-form-item label="公司简介："
                        class='desp'>
            <el-input v-if="canEdit"
                      type="textarea"
                      class="textA w-500"
                      v-model="form.textA"
                      :disabled="isEdit">
            </el-input>
            <span v-else
                  class="w-500">{{ form.textA }}</span>
          </el-form-item>
        </el-row>
      </el-form>
    </el-card>
    <!-- 基础信息模板 -->
  
    <!-- 营业品类模板 -->
    <el-card class="box-card contact-card m-b-20">
      <div slot="header"
           class="clearfix">
        <span style="line-height: 36px;">营业品类</span>
        <el-button class="fr"
                   type="success"
                   v-if="canEdit"
                   @click="openCategoryDialog()">添加
        </el-button>
      </div>
      <el-table border
                style="width: 100%"
                row-class-name="none-hover"
                :data="[]">
        <el-table-column props="index"
                         label="专长排序"
                         header-align="center">
          <template scope="scope">
            {{ scope.row.index }}
          </template>
        </el-table-column>
        <el-table-column label="品类"
                         min-width="350"
                         header-align="center">
          <template scope="scope">
            <el-tree :data="scope.row.data"
                     :props="defaultProps">
            </el-tree>
          </template>
        </el-table-column>
        <el-table-column label="操作"
                         width="100"
                         header-align="center">
          <template scope="scope">
            <a class="c-blue"
               @click="openCategoryDialog(scope.$index)">编辑</a>
            <a class="c-blue"
               @click="removeCategory(scope.$index)">删除</a>
          </template>
        </el-table-column>
      </el-table>
    </el-card>
    <!-- 营业品类模板 -->
  
    <!-- 联系人模板 -->
    <el-card class="box-card contact-card m-b-20">
      <div slot="header"
           class="clearfix">
        <span style="line-height: 36px;">联系人</span>
        <el-button class="fr"
                   type="success"
                   v-if="canEdit"
                   @click="addContact">添加
        </el-button>
      </div>
      <el-table :data="contactList"
                row-class-name="tx-c m-t-5 m-b-5">
        <el-table-column label="联系人"
                         header-align="center">
          <template scope="scope">
            <el-input v-if="canEdit"
                      v-model="scope.row.name"
                      placeholder="请输入联系人"
                      :disabled="isEdit"></el-input>
            <span v-else>{{ scope.row.name }}</span>
          </template>
        </el-table-column>
        <el-table-column label="职位"
                         header-align="center">
          <template scope="scope">
            <el-input v-if="canEdit"
                      v-model="scope.row.position"
                      placeholder="请输入职位"
                      :disabled="isEdit"></el-input>
            <span v-else>{{ scope.row.position }}</span>
          </template>
        </el-table-column>
        <el-table-column label="手机号"
                         header-align="center">
          <template scope="scope">
            <el-input v-if="canEdit"
                      v-model="scope.row.phone"
                      placeholder="请输入手机号"
                      :disabled="isEdit"></el-input>
            <span v-else>{{ scope.row.phone }}</span>
          </template>
        </el-table-column>
        <el-table-column label="邮箱"
                         header-align="center">
          <template scope="scope">
            <el-input v-if="canEdit"
                      v-model="scope.row.email"
                      placeholder="请输入邮箱"
                      :disabled="isEdit"></el-input>
            <span v-else>{{ scope.row.email }}</span>
          </template>
        </el-table-column>
        <el-table-column label="操作"
                         v-if="!isEdit && canEdit"
                         header-align="center">
          <template scope="scope">
            <el-button size="small"
                       type="danger"
                       @click="deleteRow(contactList, scope.$index,'contactList')">删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-card>
    <!-- 联系人模板 -->
  
    <!--资料情况模板-->
    <el-card class="box-card data-card m-b-20">
      <div slot="header"
           class="clearfix">
        <span style="line-height: 36px;">资料情况</span>
        <el-button class="fr"
                   v-if="canEdit"
                   type="success"
                   @click.prevent="uploadFile">添加
        </el-button>
      </div>
      <el-table :data="customerData"
                row-class-name="tx-c">
        <el-table-column prop="name"
                         label="上传人"
                         header-align="center">
        </el-table-column>
        <el-table-column prop="type"
                         label="证件名"
                         header-align="center">
          <template scope="scope">
            <a :href="scope.row.showPath"
               download="scope.row.type"
               style='color: #1f2d3d'
               class="lineh-36 underline">{{ scope.row.type }}</a>
          </template>
        </el-table-column>
        <el-table-column prop="create_time"
                         label="上传时间"
                         header-align="center">
        </el-table-column>
        <el-table-column label="备注"
                         header-align="center">
          <template scope="scope">
            <el-col :span="24">
              <el-input v-if="canEdit"
                        :disabled="isEdit"
                        placeholder="请输入内容"
                        v-model="scope.row.remark">
              </el-input>
              <span v-else>{{ scope.row.remark }}</span>
            </el-col>
          </template>
        </el-table-column>
        <el-table-column label="操作"
                         header-align="center"
                         v-if="!isEdit && canEdit">
          <template scope="scope">
            <el-button size="small"
                       type="danger"
                       @click="deleteRow(customerData, scope.$index, 'customerData')">删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-card>
    <!--资料情况模板-->
  
    <!-- 跟进情况模板 -->
    <el-card class="box-card follow-card">
      <div slot="header"
           class="clearfix">
        <span style="line-height: 36px;">跟进情况</span>
      </div>
      <el-form ref="form"
               :model="form"
               label-width="100px">
        <el-row>
          <el-col :span="24">
            <el-form-item label="跟进人员：">
              <el-col :span="4"
                      v-for="item in followPeople">
                <el-form-item :label="`${item.label}:`"
                              label-width="110px">
                  <el-tag type="primary"
                          v-show="item.name"
                          :closable="canfollowAndRelease && canEdit && publicMode"
                          @close="release(item)">{{ item.name }}</el-tag>
                </el-form-item>
              </el-col>
              <el-col :span="4">
                <el-button type="text"
                           v-if="canfollowAndRelease && canEdit && publicMode"
                           @click="$refs.staff.open()">分配
                </el-button>
              </el-col>
              <staff ref="staff"
                     :clients="[]"
                     :callback="()=>{}"
                     :followPeople="followPeople">
              </staff>
            </el-form-item>
          </el-col>
        </el-row>
  
        <el-row>
          <el-col :span="24">
            <el-form-item label="客户状态：">
              <el-radio-group v-if="canEdit"
                              v-model="customerStatus">
                <el-radio label="已跟进"
                          :disabled="isEdit"></el-radio>
                <el-radio label="无效"
                          :disabled="isEdit"></el-radio>
              </el-radio-group>
              <span v-else>{{ customerStatus }}</span>
            </el-form-item>
          </el-col>
        </el-row>
  
        <el-row>
          <el-col :span="5">
            <el-form-item label="公司级别：">
              <el-select v-if="canEdit"
                         v-model="value"
                         style="width:100%;"
                         placeholder="请选择"
                         :disabled="isEdit">
                <el-option v-for="item in levelOptions"
                           :label="item.label"
                           :value="item.value">
                </el-option>
              </el-select>
              <span v-else
                    class="w-500">{{ value }}</span>
            </el-form-item>
          </el-col>
        </el-row>
  
        <el-row>
          <el-col :span="5">
            <el-form-item label="回访时间：">
              <el-date-picker v-if="canEdit"
                              v-model="time"
                              type="datetime"
                              style="width:100%;"
                              placeholder="选择日期范围"
                              :disabled="disableVisit">
              </el-date-picker>
              <span v-else>{{ time }}</span>
            </el-form-item>
          </el-col>
        </el-row>
  
        <el-row>
          <el-col v-if="canEdit"
                  :span="12">
            <el-form-item label="跟进说明："
                          :required="getRequired">
              <el-input type="textarea"
                        v-model="text"
                        placeholder="请填写跟进说明"
                        :autosize="{ minRows: 5, maxRows: 10}"
                        :disabled="isEdit"></el-input>
            </el-form-item>
          </el-col>
          <el-col :span="2">
            <el-button type="text"
                       class="m-l-20"
                       @click.prevent="addRecord"
                       v-if="!isEdit && canEdit">添加</el-button>
          </el-col>
          <el-col :span="24">
            <el-table class='m-b-10'
                      :data="sturdyData"
                      row-class-name="tx-c">
              <el-table-column prop="create_time"
                               width="200"
                               label="跟进时间"
                               header-align="center">
              </el-table-column>
              <el-table-column prop="user"
                               label="跟进人员"
                               width="180"
                               header-align="center">
              </el-table-column>
              <el-table-column prop="content"
                               label="跟进说明"
                               header-align="center">
              </el-table-column>
              <el-table-column prop="level"
                               width="200"
                               label="公司级别"
                               header-align="center">
              </el-table-column>
              <el-table-column prop="return_visit"
                               label="下次回访时间"
                               width="200"
                               header-align="center">
              </el-table-column>
            </el-table>
          </el-col>
        </el-row>
      </el-form>
    </el-card>
    <!-- 跟进情况模板 -->
  
    <el-row class="fr m-t-30">
      <el-col>
        <el-button @click="goPrev()"
                   v-if="hasPrev">上一家</el-button>
        <el-button @click="goNext()"
                   v-if="hasNext">下一家</el-button>
        <el-button type="success"
                   @click="unRelative()"
                   v-if="form.dsu_id">取消关联</el-button>
        <el-button @click="goback()">返回</el-button>
        <el-button type="primary"
                   @click="edit()"
                   :loading="fetching"
                   v-if="canEdit">保存</el-button>
      </el-col>
    </el-row>
  
    <!-- 弹出层 -->
    <upload ref="upload"></upload>
  
    <!--营业品类-->
    <category ref="category"
              :type="categoryMode"
              v-if="categoryVisible"
              :handleSubmit="addCategory"
              :handleEdit="editCategory"
              :category-list="mockCategory">
    </category>
    <!--营业品类-->
  
    <!-- 弹出层 -->
  </div>
  </div>
</template>

<style>
.box-card .el-card__body {
  padding: 0;
}

.box-card.base-card .el-card__body,
.box-card.follow-card .el-card__body {
  padding: 20px;
}

.box-card .el-table__body-wrapper .cell {
  margin-top: 10px;
  margin-bottom: 10px;
}

.el-form--inline .el-form-item__label {
  float: left;
}
</style>

<script>
import category from 'components/common/dialog/category.vue'
import levelOptions from 'assets/json/client_level.json'
import address from 'assets/js/city-data.json'
import http from 'assets/js/http'
import staff from './staff.vue'
import upload from './upload.vue'
import moment from 'moment'
export default {
  props: ['type'],
  data() {
    return {
      status: '',
      customerStatus: '',
      is_status: 0,
      efficientStatus: false,
      invalidStatus: false,
      categoryMode: 'add', // 营业品类模式
      categoryVisible: false, // 营业品类弹出层可见性
      auth: 0,
      cus_id: null,
      fetching: false,
      proCityList: address,
      proCityVal: [],
      source: '',
      form: {
        dsu_id: 0,
        province: '',
        city: '',
        area: '',
        address: '',
        name: '',
        num: '',
        account: '',
        source: '',
        password: '',
        type: '',
        mobile: '',
        size: '',
        textA: '',
        link: { last: null, next: null }
      },
      rules: {
        name: [
          { required: true, message: '请填写公司名称', trigger: 'blur' }
        ]
      },
      contactList: [],
      levelOptions,
      levels: ['', 'A热门客户', 'B普通客户', 'C潜在客户', 'D无法沟通'],
      value: '',
      customerData: [],
      input: '',
      text: '',
      sturdyData: [],
      followPeople: [],
      level: '',
      del_contact_list: [],
      follow_people: [],
      del_data_situation: [],
      is_saleClose: false,
      is_serviceClose: false,
      is_pushClose: false,
      match: '',
      del_follow_record: [],
      new__follow_record: [],
      cancel_release: '释放',
      is_release: true,
      isFirst: true,
      uploadData: [],
      isEdit: true,
      show: Lockr.get('authList'),
      follow_num: '',
      uploadUrl: '',
      fileList: [],
      logo: '',
      imgSrc: '',
      head: require('../../../assets/images/head.png'),
      path: '',
      time: ''
    }
  },
  watch: {
    proValue(val, oldVal) {  // 监听省份的选择，以更新城市选项
      var self = this
      // self.cityValue = ''
      self.cityOptions = address['city'][val]
      self.proValue = val
      if (!self.isFirst) {
        self.cityValue = ''
      } else {
        self.isFirst = false
      }
    },
    value(val) { // 监听客户级别的选择，并赋予level
      this.level = val
    },
    customerStatus(val) { // 监听客户状态
      this.is_status = val !== '无效' ? 1 : 2
    },
    '$route.params'() {
      this.getCustomerInfo()
    }
  },
  methods: {
    beforeAvatarUpload(file) {
      var self = this
      if (self.isEdit) {
        _g.toastMsg(self, 'warning', '您没有上传头像的权限！')
      }
      return !self.isEdit
    },
    uploadFail(err, res, file) { // 头像上传失败
      _g.toastMsg(this, 'warning', '上传失败！')
    },
    uploadSuccess(res, file, fileList) { // 头像上传成功
      var self = this
      if (fileList.length == 2) {
        fileList.shift()
      }
      self.fileList = fileList
      self.imgSrc = imgUrl + self.fileList[0].response.data
      _g.toastMsg(self, 'success', '上传成功！')
    },
    addRecord() { // 添加跟进说明
      if (this.text) {
        let level = this.value ? this.levelOptions[this.value - 1].label : null
        let temp = {
          level,
          content: this.text,
          c_id: this.$route.params.id,
          create_time: _g.getDatetime(),
          user: Lockr.get('userInfo').u_realname,
          return_visit: this.time ? moment(this.time).format('YYYY-MM-DD hh:mm:ss') : null
        }
        this.sturdyData.push(temp)
        this.new__follow_record.push(temp)
        this.text = ''
      } else {
        _g.toastMsg(this, 'warning', '请填写跟进说明！')
      }
    },
    followAdd(form) { // 添加客户上传资料的情况
      var self = this
      self.customerData.push({
        name: Lockr.get('userInfo').u_realname,
        type: form.name,
        create_time: _g.getDatetime(),
        remark: form.desc,
        path: form.fileList[0].response.data,
        showPath: imgUrl + form.fileList[0].response.data,
        introduction: ''
      })
    },
    uploadFile() { // 打开上传文件的窗口
      var self = this
      self.$refs.upload.open()
    },
    onChildChange(res) { // 获取选择的跟进人员
      var self = this
      self.followPeople = []
      self.followPeople = res
    },
    addContact() { // 添加联系方式
      var self = this
      var temp = {
        name: '',
        phone: '',
        email: '',
        position: ''
      }
      self.contactList.push(temp)
    },
    deleteRow(item, index, str) { // 删除
      var self = this
      self.$confirm('确认删除?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        if (str == 'contactList') {
          self.del_contact_list.push(item[index].id)
        } else if (str == 'customerData') {
          self.del_data_situation.push(item[index].id)
        } else if (str == 'sturdyData' && item[index].id) {
          self.del_follow_record.push(item[index].id)
        }
        item.splice(index, 1)
        _g.toastMsg(self, 'success', '删除成功')
      }).catch(() => {
        self.$message({
          type: 'info',
          message: '已取消删除'
        })
      })
    },
    release(item) { // 释放跟进人员
      let confirmMsg = `确认释放 ${item.label} ${item.name}?`
      this.$confirm(confirmMsg, '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        let data = {
          id: [~~(this.cus_id)],
          follow_id: item.id
        }
        this.apiPost('customers/free_single', data).then((res) => {
          if (res.code === 200) {
            this.followPeople.splice(this.followPeople.indexOf(item), 1)
            this.follow_num = this.follow_num - 1
            _g.toastMsg(this, 'success', '释放成功')
          } else {
            _g.dealError(this, res)
          }
        })
      })
    },
    getCustomerInfo() { // 获取客户信息
      var self = this
      if (self.form.name) { return }
      self.apiGet('customers/' + self.cus_id).then((res) => {
        if (res.code != 200) {
          _g.dealError(this, res)
        } else {
          self.form.name = res.data.name
          self.time = res.data.return_visit
          if (res.data.source == 1) {
            self.form.source = '注册'
          } else {
            self.form.source = '系统添加'
          }
          self.logo = res.data.logo
          if (self.logo == 0) {
            self.imgSrc = self.head
          } else {
            self.imgSrc = imgUrl + self.logo
          }
          self.follow_num = res.data.follow_num
          self.match = res.data.require
          self.form.num = res.data.num
          self.form.account = res.data.account
          self.value = res.data.level
          self.proValue = res.data.province
          self.cityValue = res.data.city
          self.contactList = res.data.demandServiceContacts || []
          self.form.mobile = res.data.phone
          self.form.size = res.data.size
          self.form.textA = res.data.remark
          self.form.province = res.data.province
          self.form.city = res.data.city
          self.form.area = res.data.area
          self.form.address = res.data.address
          self.form.link = res.data.link
          self.form.dsu_id = res.data.dsu_id
          self.auth = res.data.auth || 0
          let { province, city, area } = res.data
          if (this.canEdit) {
            self.proCityVal = [province, city, area]
          } else {
            self.proCityVal = `${province}${city}${area}`
          }
          if (res.data.dsu_id) {
            let data = {
              query: { ...this.$route.query, dsu_id: res.data.dsu_id }
            }
            router.push(data)
          }
          if (res.data.status !== 2) {
            self.customerStatus = '已跟进'
          } else {
            self.customerStatus = '无效'
          }
          self.sturdyData = res.data.followRecord
          if (res.data.followPeople.length != 0) {
            self.followPeople = res.data.followPeople
          }
          self.customerData = res.data.dataRecord
          for (var i = 0; i < self.customerData.length; i++) {
            self.customerData[i].showPath = imgUrl + self.customerData[i].path
          }
        }
      })
    },
    selectStaff() { // 选择跟进人员
      var self = this
      const { group_id, title } = Lockr.get('roleType')
      if (Lockr.get('authList') == null || self.show['myClient_button']) {
        self.$refs.staff.open()
      } else if (self.show['myClient_view'] && group_id == 1 || group_id == 2 || group_id == 3) {
        for (var i = 0; i < self.followPeople.length; i++) {
          if (Lockr.get('userInfo').u_id == self.followPeople[i].id) {
            _g.toastMsg(self, 'warning', '您已跟进该客户！')
            return
          } else if (title == self.followPeople[i].label) {
            _g.toastMsg(self, 'warning', '该客户已有' + title + '跟进！')
            return
          }
        }
        if (Lockr.get('userInfo').u_follow_num > self.follow_num) {
          self.$confirm('确认跟进该客户?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            self.followPeople.push({ label: title, name: Lockr.get('userInfo').u_realname, id: Lockr.get('userInfo').u_id })
            self.follow_num = self.follow_num + 1
            _g.toastMsg(self, 'success', '已跟进')
          }).catch(() => {
            self.$message({
              type: 'info',
              message: '已取消跟进'
            })
          })
        } else {
          _g.toastMsg(self, 'warning', '您的跟进客户数已达上限！')
        }
      } else {
        _g.toastMsg(self, 'warning', '只有销售人员、客服、地推才能跟进！')
      }
    },
    handleChangeCity(val) {
      this.form.province = val[0]
      this.form.city = val[1]
      this.form.area = val[2]
    },
    edit() { // 保存修改信息
      this.toggleFetching()
      if (this.getRequired) {
        this.toggleFetching()
        return _g.toastMsg(this, 'error', '没有添加任何跟进记录')
      }
      for (var s = 0; s < this.customerData.length; s++) {
        if (this.customerData[s].id) {
          this.uploadData.push({
            id: this.customerData[s].id,
            name: this.customerData[s].name,
            type: this.customerData[s].type,
            create_time: this.customerData[s].create_time,
            remark: this.customerData[s].remark,
            path: this.customerData[s].path,
            introduction: this.customerData[s].introduction
          })
        } else {
          this.uploadData.push({
            name: this.customerData[s].name,
            type: this.customerData[s].type,
            create_time: this.customerData[s].create_time,
            remark: this.customerData[s].remark,
            path: this.customerData[s].path,
            introduction: this.customerData[s].introduction
          })
        }
      }
      for (var i = 0; i < this.followPeople.length; i++) {
        this.follow_people.push(this.followPeople[i].id)
      }
      if (this.fileList.length) {
        this.logo = this.fileList[0].response.data
      } else {
        this.logo = 0
      }
      let followRecord = _(this.new__follow_record).map(item => {
        return {
          c_id: item.c_id,
          content: item.content,
          level: _.find(this.levelOptions, { label: item.level }).value,
          return_visit: item.return_visit
        }
      })
      let data = {
        id: this.cus_id,
        dataRecord: this.uploadData,
        followPeople: this.follow_people,
        demandServiceContacts: this.contactList,
        followRecord,
        auth: this.auth ? 1 : 0,
        name: this.form.name,
        phone: this.form.mobile,
        remark: this.form.textA,
        city: this.form.city,
        area: this.form.area,
        province: this.form.province,
        address: this.form.address,
        size: this.form.size,
        level: this.level,
        status: this.is_status
      }
      if (data.status !== 2) {
        data.return_visit = this.time ? moment(this.time).format('YYYY-MM-DD hh:mm:ss') : null
      }
      this.apiPost('customers/', data).then((res) => {
        if (res.code == 200) {
          _g.toastMsg(this, 'success', '编辑成功')
          this.toggleFetching()
          this.goback()
        } else {
          this.toggleFetching()
          _g.dealError(this, res)
        }
      })
    },
    goPrev() { // 跳转到上一家
      let arr = this.form.link.last.split('/')
      let params = { id: arr[arr.length - 1] }
      router.push({ params })
      _g.reloadPage(this)
    },
    goNext() { // 跳转到下一家
      let arr = this.form.link.next.split('/')
      let params = { id: arr[arr.length - 1] }
      router.push({ params })
      _g.reloadPage(this)
    },
    unRelative() { // 取消关联
      let data = { ids: [this.cus_id] }
      this.apiPost('customers/del_relation', data).then(res => {
        if (res.code === 200) {
          _g.toastMsg(this, 'success', res.data)
          this.form.dsu_id = 0
          let query = {}
          router.push({ query })
          _g.reloadPage(this)
        }
      })
    },
    goback() { // 返回上一页面
      if (this.$route.params.path) {
        this.path = this.$route.params.path
      } else {
        this.path = Lockr.get('path')
      }
      location.hash = this.path
    },
    getAccount(index) { // 对手机号码进行验证
      var self = this
      if (!(/^1[34578]\d{9}$/.test(self.contactList[index].phone))) {
        _g.toastMsg(self, 'warning', '请填写有效的手机号码！')
      }
    },
    toggleFetching() {
      this.fetching = !this.fetching
    },
    openCategoryDialog(index = null) {
      // if (index || typeof index === 'number') {
      //   this.categoryMode = 'edit'
      //   this.mockCategory = this.userForm.business_category[index]
      // } else {
      //   this.categoryMode = 'add'
      //   this.mockCategory = { id: null, child: [] }
      // }
      // this.currentCategoryIndex = index
      this.categoryVisible = true
      this.$nextTick(() => {
        this.$refs.category.open()
      })
    },
    addCategory(data) { // 添加营业品类
      // this.apiPost('demand_user/category', data)
      //   .then(res => {
      //     if (res.code !== 200) {
      //       return this.$message.error(res.error)
      //     }
      //     let categorys = this.userForm.business_category
      //     let data = [{ ...res.data }]
      //     categorys.push({ index: categorys.length + 1, ...res.data, data })
      //     this.$refs.category.destory()
      //   })
    },
    editCategory(data) { // 编辑营业品类
      // let index = this.currentCategoryIndex
      // let categorys = this.userForm.business_category
      // let { key } = categorys[index].data[0]
      // this.apiPut('demand_user/category/', key, data)
      //   .then(res => {
      //     if (res.code !== 200) {
      //       return this.$message.error(res.error)
      //     }
      //     let data = [{ ...res.data }]
      //     this.$set(categorys, index, { index: index + 1, ...res.data, data })
      //     this.$refs.category.destory()
      //     this.$message.success('保存成功')
      //   })
    },
    removeCategory(index) {
      // let { key } = this.userForm.business_category[index].data[0]
      // this.apiDelete('demand_user/category/', key)
      //   .then(res => {
      //     if (res.code !== 200) {
      //       return this.$message.error(res.error)
      //     }
      //     this.userForm.business_category.splice(index, 1)
      //     this.$message.success(res.data)
      //   })
    }
  },
  computed: {
    authLabel() {
      return this.auth ? '已认证' : '未认证'
    },
    fullAddress() {
      return this.proCityVal + this.form.address
    },
    disableVisit() {
      return this.is_status === 2
    },
    getRequired() {
      return this.is_status === 1 && this.new__follow_record.length === 0
    },
    publicMode() {
      return this.$route.name === 'publicClientEdit'
    },
    canfollowAndRelease() {
      return this.show == null || this.show['publicClient_button']
    },
    canEdit() {
      return this.$route.name === 'publicClientEdit' || this.$route.name === 'myClientEdit'
    },
    hasPrev() {
      return this.form.link.last
    },
    hasNext() {
      return this.form.link.next
    }
  },
  created() {
    var self = this
    const { id, path } = self.$route.params
    if (path) {
      Lockr.set('path', path)
    }
    self.uploadUrl = window.HOST + 'Upload/data'
    if (self.show == null || self.show['myClient_edit']) {
      self.isEdit = false
    }
    self.cus_id = id
    self.getCustomerInfo()
  },
  components: {
    staff,
    upload,
    category
  },
  mixins: [http]
}
</script>